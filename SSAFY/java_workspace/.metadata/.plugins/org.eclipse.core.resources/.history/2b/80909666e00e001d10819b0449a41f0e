package com.ssafy.ws.step2;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * 도서리스트를 배열로 유지하며 관리하는 클래스
 */
public class MovieManagerImpl implements IMovieManager {

	private static IMovieManager instance = new MovieManagerImpl();
	public static IMovieManager getInstance() {
		return instance;
	}
	
	
	private List<Movie> movies;	

	private MovieManagerImpl() {
		movies = new ArrayList<>();
	}
	
	@Override
	public void add(Movie movie) {
		movies.add(movie);
	}

	@Override
	public Movie[] getList() {
		Movie[] tmp = new Movie[movies.size()];
		int idx = 0;
		for(Movie m : movies) {
			tmp[idx++]=m;
		} return tmp;
	}
	
	@Override
	public Movie[] searchByTitle(String title) throws TitleNotFoundException {
		List<Movie> tmpList = new ArrayList<>();
		for (Movie m : movies) {
			if(m.getTitle().contains(title))
				tmpList.add(m);
		}
		if (tmpList.size() == 0) {
			throw new TitleNotFoundException(title); 
		}
		Movie[] tmp = new Movie[tmpList.size()];
		int idx = 0;
		for(Movie m : tmpList) {
			tmp[idx++] = m;
		}
		return tmp; //키워드 가지고 있는 아이들 모두 보여주기
	}
	@Override
	public Movie[] getMovies() {
		int cnt = 0;
		for(int i = 0; i < movies.size(); i++) {
			if (!(movies.get(i) instanceof SeriesMovie)) {
				cnt++;
			}
		}
		Movie[] tmp = new Movie[cnt];
		int idx = 0;
		for(int i = 0; i < movies.size(); i++) {
			if (!(movies.get(i) instanceof SeriesMovie)) {
				tmp[idx++] = movies.get(i);
			}
		}
		return tmp;			
	}

	@Override
	public SeriesMovie[] getSeriesMovies() {
		int cnt = 0;
		for(int i = 0; i <movies.size(); i++) {
			if (movies.get(i) instanceof SeriesMovie) {
				cnt++;
			}
		}
		SeriesMovie[] tmp = new SeriesMovie[cnt];
		int idx = 0;
		for(int i = 0; i < movies.size(); i++) {
			if (movies.get(i) instanceof SeriesMovie) {
				tmp[idx++] = (SeriesMovie)movies.get(i);
			}
		}
		return tmp;	
	}

	@Override
	public double getRunningTimeAvg() {
		int sum = 0;
		for(int i = 0; i < movies.size(); i++) {
			sum += movies.get(i).getRunningTime();
		}
		return (double)(sum/movies.size());
	}

	@Override
	public int getSize() {
		return movies.size();
	}

	@Override
	public void loadDate() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void saveData() {
		try(ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream)){
			
		}
		
	}


}
